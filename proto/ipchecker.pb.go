// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: ipchecker.proto

package ipchecker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The IPCheckRequest message includes the IP address and a list of allowed countries.
type IPCheckRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IpAddress        string                 `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	AllowedCountries []string               `protobuf:"bytes,2,rep,name=allowed_countries,json=allowedCountries,proto3" json:"allowed_countries,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IPCheckRequest) Reset() {
	*x = IPCheckRequest{}
	mi := &file_ipchecker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPCheckRequest) ProtoMessage() {}

func (x *IPCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipchecker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPCheckRequest.ProtoReflect.Descriptor instead.
func (*IPCheckRequest) Descriptor() ([]byte, []int) {
	return file_ipchecker_proto_rawDescGZIP(), []int{0}
}

func (x *IPCheckRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *IPCheckRequest) GetAllowedCountries() []string {
	if x != nil {
		return x.AllowedCountries
	}
	return nil
}

// The IPCheckResponse message indicates if the IP is allowed and the resulting country code.
type IPCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Allowed       bool                   `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	Country       string                 `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPCheckResponse) Reset() {
	*x = IPCheckResponse{}
	mi := &file_ipchecker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPCheckResponse) ProtoMessage() {}

func (x *IPCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ipchecker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPCheckResponse.ProtoReflect.Descriptor instead.
func (*IPCheckResponse) Descriptor() ([]byte, []int) {
	return file_ipchecker_proto_rawDescGZIP(), []int{1}
}

func (x *IPCheckResponse) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *IPCheckResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

var File_ipchecker_proto protoreflect.FileDescriptor

const file_ipchecker_proto_rawDesc = "" +
	"\n" +
	"\x0fipchecker.proto\x12\fipchecker.v1\"\\\n" +
	"\x0eIPCheckRequest\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x01 \x01(\tR\tipAddress\x12+\n" +
	"\x11allowed_countries\x18\x02 \x03(\tR\x10allowedCountries\"E\n" +
	"\x0fIPCheckResponse\x12\x18\n" +
	"\aallowed\x18\x01 \x01(\bR\aallowed\x12\x18\n" +
	"\acountry\x18\x02 \x01(\tR\acountry2S\n" +
	"\tIPChecker\x12F\n" +
	"\aCheckIP\x12\x1c.ipchecker.v1.IPCheckRequest\x1a\x1d.ipchecker.v1.IPCheckResponseB<Z:github.com/justfairdev/ipchecker/proto/ipchecker;ipcheckerb\x06proto3"

var (
	file_ipchecker_proto_rawDescOnce sync.Once
	file_ipchecker_proto_rawDescData []byte
)

func file_ipchecker_proto_rawDescGZIP() []byte {
	file_ipchecker_proto_rawDescOnce.Do(func() {
		file_ipchecker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ipchecker_proto_rawDesc), len(file_ipchecker_proto_rawDesc)))
	})
	return file_ipchecker_proto_rawDescData
}

var file_ipchecker_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ipchecker_proto_goTypes = []any{
	(*IPCheckRequest)(nil),  // 0: ipchecker.v1.IPCheckRequest
	(*IPCheckResponse)(nil), // 1: ipchecker.v1.IPCheckResponse
}
var file_ipchecker_proto_depIdxs = []int32{
	0, // 0: ipchecker.v1.IPChecker.CheckIP:input_type -> ipchecker.v1.IPCheckRequest
	1, // 1: ipchecker.v1.IPChecker.CheckIP:output_type -> ipchecker.v1.IPCheckResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ipchecker_proto_init() }
func file_ipchecker_proto_init() {
	if File_ipchecker_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ipchecker_proto_rawDesc), len(file_ipchecker_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipchecker_proto_goTypes,
		DependencyIndexes: file_ipchecker_proto_depIdxs,
		MessageInfos:      file_ipchecker_proto_msgTypes,
	}.Build()
	File_ipchecker_proto = out.File
	file_ipchecker_proto_goTypes = nil
	file_ipchecker_proto_depIdxs = nil
}
